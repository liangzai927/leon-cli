# only these branches will be run through CI:
#   - master
#   - staging
#   - dev
#

# The runner will use following pre-defined variables for build:
#   - CI_PROJECT_NAME: project name
#   - CI_COMMIT_REF_NAME: branch/tag name
#   - CI_REGISTRY: the address of GitLab's Container Registry
#   - CI_JOB_TOKEN: Token used for authenticating with the GitLab Container Registry
#   - K8S_API_SERVER: choose predefined variables among K8S_API_SERVER_${MASTER, STAGING, TESTING, DEV}
#   - K8S_API_TOKEN: choose predefined variables among K8S_API_TOKEN_${MASTER, STAGING, TESTING, DEV}
#   - MAVEN_PULL_USER: maven download account
#   - MAVEN_PULL_PASSWORD: maven download account password
#   - MAVEN_PUSH_USER: maven upload account
#   - MAVEN_PUSH_PASSWORD: maven upload account password
#
# If the CI_PROJECT_NAME is "api", the RELEASE_VERSION is "v2", CI_COMMIT_REF_NAME is "master", the
# generated kubernetes deployment name would be like:
#     api-v2-master
# If the CI_PROJECT_NAME is "api", the RELEASE_VERSION is "v2", CI_COMMIT_REF_NAME is "testing", the
# generated kubernetes deployment name would be like:
#     api-v2-testing
#
# only variables in the "editable area" should be modified.

variables:
  # {{ editable area begin }}
  REGISTRY_DEV: asia-east1-docker.pkg.dev/noah-dev-1
  NAMESPACE: blockchains-manager
  RELEASE_VERSION: v1
  # {{ editable area end }}
  CI_REGISTRY_LOCAL: harbor.bitmartlocal.com
  K8S_API_SERVER: K8S_API_SERVER_${CI_COMMIT_REF_NAME}
  K8S_API_TOKEN: K8S_API_TOKEN_${CI_COMMIT_REF_NAME}
  CONTAINER_IMAGE: ${CI_REGISTRY}/exchange/code/${CI_PROJECT_NAME}
  CONTAINER_IMAGE_LOCAL: ${CI_REGISTRY_LOCAL}/exchange/code/${CI_PROJECT_NAME}
  CONTAINER_IMAGE_FULL: ${CI_REGISTRY}/exchange/code/${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}
  CONTAINER_IMAGE_FULL_LOCAL: ${CI_REGISTRY_LOCAL}/exchange/code/${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}
  DEPLOYMENT_NAME: ${CI_PROJECT_NAME}-${RELEASE_VERSION}-${CI_COMMIT_REF_NAME}
  DOCKER_TLS_CERTDIR: ''

  # do not modify variables below
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ''

stages:
  - build
  - release
  - deploy

buildonline:
  stage: build
  only:
    - master
    - noah
    - dev
    - staging
    - uat
    - testing
  tags:
    - gcp-grouprunner
  cache:
    key: $CI_JOB_NAME-$CI_COMMIT_REF_NAME
    paths: 
      - node_modules/
  image: node:16.14-alpine3.14
  script:
    - npm install yarn -D --legacy-peer-deps
    - yarn install --legacy-peer-deps
    - yarn run build
    - tar -czf build.tar.gz dist public .env.* index.html package* vite.config.js node_modules
    - if [ ! -d /cache/"${DEPLOYMENT_NAME}"/"${CI_COMMIT_REF_NAME}" ];then  mkdir -p /cache/"${DEPLOYMENT_NAME}"/"${CI_COMMIT_REF_NAME}" ; fi
    - mv  build.tar.gz /cache/"${DEPLOYMENT_NAME}"/"${CI_COMMIT_REF_NAME}"/

releaseonline:
  stage: release
  services:
    - docker:dind
  only:
    - master
    - noah
    - dev
    - staging
    - uat
    - testing
  tags:
    - gcp-grouprunner-ssh
  image: docker:latest
  script:
    - cp /data/buildfile/"${DEPLOYMENT_NAME}"/"${CI_COMMIT_REF_NAME}"/build.tar.gz ./
    - tar -xzf build.tar.gz
    - docker login -u ${USER} -p ${TOKEN} ${CI_REGISTRY}
    - docker login -u ${GAR_NOAH_DEV_USERNAME} -p ${GAR_NOAH_DEV_PASSWORD} ${REGISTRY_DEV}
    - docker build -t ${CONTAINER_IMAGE_FULL} -t ${REGISTRY_DEV}/${NAMESPACE}/${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME} .
    - docker push ${CONTAINER_IMAGE_FULL} | grep sha256 | cut -d ' ' -f 3 > hash
    - docker push ${REGISTRY_DEV}/${NAMESPACE}/${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}
  artifacts:
    name: imagehash
    paths:
    - hash
    expire_in: 3 month

deployonline:
  stage: deploy
  only:
    - master
    - noah
    - staging
    - uat
    - testing
  tags:
    - gcp-grouprunner-ssh
  image: lachlanevenson/k8s-kubectl:v1.8.4
  script:
    - if [ ${CI_COMMIT_REF_NAME} = "uat" ];then K8S_API_SERVER=K8S_API_SERVER_nodeuat; K8S_API_TOKEN=K8S_API_TOKEN_nodeuat; fi
    - K8S_API_SERVER="$(echo ${K8S_API_SERVER}|tr '[:lower:]' '[:upper:]')" && K8S_API_TOKEN="$(echo
      ${K8S_API_TOKEN}|tr '[:lower:]' '[:upper:]')" && eval K8S_API_SERVER=$(echo \$$K8S_API_SERVER)
      && eval K8S_API_TOKEN=$(echo \$$K8S_API_TOKEN) &&
    - >-
      export imagehash=$(  cat hash  ) && echo $imagehash &&
      kubectl --insecure-skip-tls-verify
      --server="${K8S_API_SERVER}" --token="${K8S_API_TOKEN}"
      patch deployment "${DEPLOYMENT_NAME}" -n blockchains-manager
      --patch="
      {\"spec\":
        {\"template\":
          {\"spec\":
            {\"containers\":
              [{\"name\":\"${DEPLOYMENT_NAME}\", \"image\":\"${CONTAINER_IMAGE}@${imagehash}\"}]
            }
          }
        }
      }"

